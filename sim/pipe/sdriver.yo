                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f65801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f72801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Renato Scheuer
                            | # rs538
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | # 1. replace all addq with iaddq e did not use irmovq;
                            | # 2. unrolled loop (copy 4 elements each loop);
                            | # 3. alternated using rsi and rdi to avoid data dependencies and bubbles.
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x036: 712701000000000000   | 	jle Done		# if so, goto Done:
0x03f: c0f2fcffffffffffffff | 	iaddq $-4, %rdx         # len = len -4
0x049: 721d01000000000000   | 	jl tail
                            | 
0x052: 50630000000000000000 | Loop:	mrmovq (%rbx), %rsi	# read val from src...
0x05c: 50750400000000000000 | 	mrmovq 4(%rbp), %rdi    # read val from src +4
0x066: 40610000000000000000 | 	rmmovq %rsi, (%rcx)	# store src[0] to dst
0x070: 6266                 | 	andq %rsi, %rsi		# src[0] > 0
0x072: 718500000000000000   | 	jle P0  		# if so, goto P0:
0x07b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x085: 40710400000000000000 | P0:     rmmovq %rdi, 4(%rcx)    # store src[1] in dest[1]
0x08f: 6277                 |         andq %rdi, %rdi         # src[1] > 0 
0x091: 71a400000000000000   |         jle P1                  # No ? get the next element
0x09a: c0f00100000000000000 |         iaddq $1, %rax          # count++
                            | 
0x0a4: 50630800000000000000 | P1:     mrmovq 8(%rbx), %rsi    # read val from src +8
0x0ae: 50730c00000000000000 |         mrmovq 12(%rbx), %rdi   # read val from src +12
0x0b8: 40610800000000000000 |         rmmovq %rsi, 8(%rcx)     # store src[2] in dest[2]
0x0c2: 6266                 |         andq %rsi, %rsi         # src[2] > 0 
0x0c4: 71d700000000000000   |         jle P2                  # No ? get the next element
0x0cd: c0f00100000000000000 |         iaddq $1, %rax          # count++
                            |   
0x0d7:                      | P2:
0x0d7: 40710c00000000000000 |         rmmovq %rdi, 12(%rcx)   # store src[3] in dest[3]
0x0e1: 6277                 |         andq %rdi, %rdi         # src[3] > 0 
0x0e3: 71f600000000000000   |         jle P3                  # No ? get the next element
0x0ec: c0f00100000000000000 |         iaddq $1, %rax          # count++
                            | 
0x0f6:                      | P3: 
0x0f6: c0f31000000000000000 |         iaddq $16, %rbx       # goto next four positions of src
0x100: c0f11000000000000000 |         iaddq $16, %rcx       # goto next four positions of dest
0x10a: c0f2fcffffffffffffff |         iaddq $-4, %rdx       # len = len - 4
0x114: 755200000000000000   |         jge Loop              # if four left, do again
                            | 
                            |         
                            | #Npos:	irmovq $1, %r10
                            | #	subq %r10, %rdx		# len--
                            | #	irmovq $8, %r10
                            | #	iaddq %r10, %rdi		# src++
                            | #	iaddq %r10, %rsi		# dst++
                            | #	andq %rdx,%rdx		# len > 0?
                            | #	jg Loop			# if so, goto Loop:
                            | 
0x11d: c0f20400000000000000 | tail:   iaddq $4, %rdx          #get actual len
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x127:                      | Done:
0x127: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x128:                      | End:
                            | #/* $end ncopy-ys */
0x128:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x128:                      | 	.align 8
0x128:                      | src:
0x128: ffffffffffffffff     | 	.quad -1
0x130: 0200000000000000     | 	.quad 2
0x138: 0300000000000000     | 	.quad 3
0x140: fcffffffffffffff     | 	.quad -4
0x148: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x150:                      | 	.align 16
0x150:                      | Predest:
0x150: fadebc0000000000     | 	.quad 0xbcdefa
0x158:                      | dest:
0x158: abefcd0000000000     | 	.quad 0xcdefab
0x160: abefcd0000000000     | 	.quad 0xcdefab
0x168: abefcd0000000000     | 	.quad 0xcdefab
0x170: abefcd0000000000     | 	.quad 0xcdefab
0x178:                      | Postdest:
0x178: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x180:                      | .align 8
                            | # Run time stack
0x180: 0000000000000000     | 	.quad 0
0x188: 0000000000000000     | 	.quad 0
0x190: 0000000000000000     | 	.quad 0
0x198: 0000000000000000     | 	.quad 0
0x1a0: 0000000000000000     | 	.quad 0
0x1a8: 0000000000000000     | 	.quad 0
0x1b0: 0000000000000000     | 	.quad 0
0x1b8: 0000000000000000     | 	.quad 0
0x1c0: 0000000000000000     | 	.quad 0
0x1c8: 0000000000000000     | 	.quad 0
0x1d0: 0000000000000000     | 	.quad 0
0x1d8: 0000000000000000     | 	.quad 0
0x1e0: 0000000000000000     | 	.quad 0
0x1e8: 0000000000000000     | 	.quad 0
0x1f0: 0000000000000000     | 	.quad 0
0x1f8: 0000000000000000     | 	.quad 0
                            | 
0x200:                      | Stack:
