                            | #######################################################################
                            | # Test for copying block of size K;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f2ffffffffffffffff | 	irmovq $K, %rdx		# src and dst have K elements
0x014: 30f6a802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f79802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 803101000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Renato Scheuer
                            | # rs538
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | # 1. replace all addq with iaddq e did not use irmovq;
                            | # 2. unrolled loop (copy 4 elements each loop);
                            | # 3. alternated using rsi and rdi to avoid data dependencies and bubbles.
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x03f: 713001000000000000   | 	jle Done		# if so, goto Done:
0x048: c0f2fcffffffffffffff | 	iaddq $-4, %rdx         # len = len -4
0x052: 722601000000000000   | 	jl tail
                            | 
0x05b: 50630000000000000000 | Loop:	mrmovq (%rbx), %rsi	# read val from src...
0x065: 50750400000000000000 | 	mrmovq 4(%rbp), %rdi    # read val from src +4
0x06f: 40610000000000000000 | 	rmmovq %rsi, (%rcx)	# store src[0] to dst
0x079: 6266                 | 	andq %rsi, %rsi		# src[0] > 0
0x07b: 718e00000000000000   | 	jle P0  		# if so, goto P0:
0x084: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x08e: 40710400000000000000 | P0:     rmmovq %rdi, 4(%rcx)    # store src[1] in dest[1]
0x098: 6277                 |         andq %rdi, %rdi         # src[1] > 0 
0x09a: 71ad00000000000000   |         jle P1                  # No ? get the next element
0x0a3: c0f00100000000000000 |         iaddq $1, %rax          # count++
                            | 
0x0ad: 50630800000000000000 | P1:     mrmovq 8(%rbx), %rsi    # read val from src +8
0x0b7: 50730c00000000000000 |         mrmovq 12(%rbx), %rdi   # read val from src +12
0x0c1: 40610800000000000000 |         rmmovq %rsi, 8(%rcx)     # store src[2] in dest[2]
0x0cb: 6266                 |         andq %rsi, %rsi         # src[2] > 0 
0x0cd: 71e000000000000000   |         jle P2                  # No ? get the next element
0x0d6: c0f00100000000000000 |         iaddq $1, %rax          # count++
                            |   
0x0e0:                      | P2:
0x0e0: 40710c00000000000000 |         rmmovq %rdi, 12(%rcx)   # store src[3] in dest[3]
0x0ea: 6277                 |         andq %rdi, %rdi         # src[3] > 0 
0x0ec: 71ff00000000000000   |         jle P3                  # No ? get the next element
0x0f5: c0f00100000000000000 |         iaddq $1, %rax          # count++
                            | 
0x0ff:                      | P3: 
0x0ff: c0f31000000000000000 |         iaddq $16, %rbx       # goto next four positions of src
0x109: c0f11000000000000000 |         iaddq $16, %rcx       # goto next four positions of dest
0x113: c0f2fcffffffffffffff |         iaddq $-4, %rdx       # len = len - 4
0x11d: 755b00000000000000   |         jge Loop              # if four left, do again
                            | 
                            |         
                            | #Npos:	irmovq $1, %r10
                            | #	subq %r10, %rdx		# len--
                            | #	irmovq $8, %r10
                            | #	iaddq %r10, %rdi		# src++
                            | #	iaddq %r10, %rsi		# dst++
                            | #	andq %rdx,%rdx		# len > 0?
                            | #	jg Loop			# if so, goto Loop:
                            | 
0x126: c0f20400000000000000 | tail:   iaddq $4, %rdx          #get actual len
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x130:                      | Done:
0x130: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x131:                      | End:
                            | #/* $end ncopy-ys */
0x131:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x131:                      | check:
                            | 	# Return value test
0x131: 30fa0000000000000000 | 	irmovq $0,%r10
0x13b: 61a0                 | 	subq %r10,%rax
0x13d: 735901000000000000   | 	je checkb
0x146: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x150: 709702000000000000   | 	jmp cdone
0x159:                      | checkb:
                            | 	# Code length check
0x159: 30f03101000000000000 | 	irmovq EndFun,%rax
0x163: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x16d: 6120                 | 	subq %rdx,%rax
0x16f: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x179: 6102                 | 	subq %rax,%rdx
0x17b: 759701000000000000   | 	jge checkm
0x184: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x18e: 709702000000000000   | 	jmp cdone
0x197:                      | checkm:
0x197: 30f2a802000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x1a1: 30f39802000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x1ab: 30f7ffffffffffffffff | 	irmovq $K,%rdi  # Count
0x1b5: 6277                 | 	andq %rdi,%rdi
0x1b7: 731502000000000000   | 	je checkpre         # Skip check if count = 0
0x1c0:                      | mcloop:
0x1c0: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x1ca: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x1d4: 6160                 | 	subq %rsi,%rax
0x1d6: 73f201000000000000   | 	je  mok
0x1df: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x1e9: 709702000000000000   | 	jmp cdone
0x1f2:                      | mok:
0x1f2: 30f00800000000000000 | 	irmovq $8,%rax
0x1fc: 6002                 | 	addq %rax,%rdx	  # dest ++
0x1fe: 6003                 | 	addq %rax,%rbx    # src++
0x200: 30f00100000000000000 | 	irmovq $1,%rax
0x20a: 6107                 | 	subq %rax,%rdi    # cnt--
0x20c: 76c001000000000000   | 	jg mcloop
0x215:                      | checkpre:
                            | 	# Check for corruption
0x215: 30f2a002000000000000 | 	irmovq Predest,%rdx
0x21f: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x229: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x233: 6120                 | 	subq %rdx,%rax
0x235: 735102000000000000   | 	je checkpost
0x23e: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x248: 709702000000000000   | 	jmp cdone
0x251:                      | checkpost:
                            | 	# Check for corruption
0x251: 30f2a802000000000000 | 	irmovq Postdest,%rdx
0x25b: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x265: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x26f: 6120                 | 	subq %rdx,%rax
0x271: 738d02000000000000   | 	je checkok
0x27a: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x284: 709702000000000000   | 	jmp cdone
0x28d:                      | checkok:
                            | 	# Successful checks
0x28d: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x297:                      | cdone:
0x297: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x298:                      | 	.align 8
0x298:                      | src:
0x298: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x2a0:                      | 	.align 16
0x2a0:                      | Predest:
0x2a0: fadebc0000000000     | 	.quad 0xbcdefa
0x2a8:                      | dest:
0x2a8:                      | Postdest:
0x2a8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x2b0:                      | .align 8
                            | # Run time stack
0x2b0: 0000000000000000     | 	.quad 0
0x2b8: 0000000000000000     | 	.quad 0
0x2c0: 0000000000000000     | 	.quad 0
0x2c8: 0000000000000000     | 	.quad 0
0x2d0: 0000000000000000     | 	.quad 0
0x2d8: 0000000000000000     | 	.quad 0
0x2e0: 0000000000000000     | 	.quad 0
0x2e8: 0000000000000000     | 	.quad 0
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
0x310: 0000000000000000     | 	.quad 0
0x318: 0000000000000000     | 	.quad 0
0x320: 0000000000000000     | 	.quad 0
0x328: 0000000000000000     | 	.quad 0
                            | 
0x330:                      | Stack:
